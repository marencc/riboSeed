# -*- coding: utf-8 -*-
"""
Created on Tue Aug 30 08:57:31 2016
@author: nicholas

"""
__version__ = "0.0.3"
import time
import sys
import shutil
import logging
import subprocess
import os
import unittest
import hashlib
import glob
import argparse
sys.dont_write_bytecode = True

from riboSeed.riboSelect import multisplit, get_filtered_locus_tag_dict, \
    pure_python_kmeans


from pyutilsnrw.utils3_5 import get_genbank_record, check_installed_tools

def get_args():
    parser = argparse.ArgumentParser(
        description="test suite for pyutilsnrw repo")
    parser.add_argument("-k", "--keep_temps", dest='keep_temps',
                        action="store_true",
                        help="set if you want to inspect the output files",
                        default=False)
    args = parser.parse_args()
    return(args)

logger = logging
@unittest.skipIf((sys.version_info[0] != 3) or (sys.version_info[1] < 5),
                 "Subprocess.call among otherthings wont run if you try this" +
                 " with less than python 3.5")
class riboSelect_TestCase(unittest.TestCase):
    # def init(self):
    #     pass
    # keep_temps = False
    # self.samtools = "test"
    # # samtools_exe = "samtoolz"
    # # def __init__(self, testname, keep_temps):
    # #     super(utils3_5TestCase, self).__init__(testname)
    # #     self.keep_temps = keep_temps
    # #     pass
    # print(self.samtools)
    def setUp(self):
        pass

    def test_multisplit(self):
        test_string = "look_this+is+a locus_that_is+multi-delimited"
        list_of_things = multisplit(["-", "_", "+", " "], test_string)
        test_other_string = "look_this+is+a\failed locus_that_is+multi-delimited"
        list_of_other_things = multisplit(["-", "_", "+", " "], test_other_string)
        self.assertEqual(list_of_things, ["look", "this", "is", "a", "locus",
                                          "that", "is", "multi", "delimited"])
        self.assertNotEqual(list_of_other_things, ["look", "this", "is", "a", "locus",
                                          "that", "is", "multi", "delimited"])

    def test_get_filtered_locus_tag_dict(self):
        # test single genbank record
        record = get_genbank_record(test_gb_file)
        # with self.assertRaises(SystemExit):
        # test that when given a bad feature empty results are returned
        bum_coords, bum_nfeat, bum_nfeat_simple = \
            get_filtered_locus_tag_dict([record], feature="RRNA",
                                        specific_features="16S",
                                        verbose=False)
        self.assertTrue([len(x) == 0 for x in \
                         [bum_nfeat, bum_nfeat_simple, bum_coords]])
        bum_coords2, bum_nfeat2, bum_nfeat_simple2 = \
            get_filtered_locus_tag_dict([record], feature="rRNA",
                                        specific_features="18S",
                                        verbose=False)
        self.assertTrue([len(x) == 0 for x in \
                         [bum_nfeat, bum_nfeat_simple, bum_coords]])

        filtered, nfeat, nfeat_simple =\
                get_filtered_locus_tag_dict([record], feature="rRNA",
                                            specific_features="16S",
                                            verbose=False)
        # print(record)
        self.assertEqual(len(filtered), 7)
        self.assertEqual([8614, 'NC_011751.1', 'ECUMN_16S_4', 'rRNA', ['ribosomal', 'RNA', '16S']],
                         filtered[8614])
        self.assertEqual(nfeat_simple, {'NC_011751.1': [7]})

        # test scaffolded
        #TODO

    def test_dopey_kmeans_function(self):
        r_is_installed = check_installed_tools(["R"],
                                               hard=False, logger=logger)
        if r_is_installed:
            test_for_clustering = [4,5,6,10,11,18,34,44,38]
            p




def pure_python_kmeans(data, group_by=None, centers=3, DEBUG=True):
    """giveb 1d list of numberic data and number of centers, returns a
    csv with the data and cluster, and LP's disapointment
    """
    with open(os.path.join(os.getcwd(), "list.csv"), "w") as f:
        for i in data:
            f.write("".join([str(i), "\n"]))
    rcmds = ["# Generated by riboSelect.py on {0}".format(time.asctime()),
             "centers <- {0}".format(centers),
             "data <- read.csv('list.csv', header=F, col.names=c('index'))",
             "km <- kmeans(data[,1], nstart=100,iter.max=100,centers=centers)",
             "data[,2] <- km[1]",
             "data <- data[order(data[,1]),  ]",
             "write.csv(data, 'list.csv',  row.names=F)"]
    with open(os.path.join(os.getcwd(), "km_script.R"), "w") as f:
        for i in rcmds:
                f.write(i)
                f.write('\n')
    subprocess.run("Rscript km_script.R", shell=sys.platform != 'win32',
                   check=True)
    with open('list.csv', mode='r') as infile:
        reader = csv.reader(infile)
        next(reader, None)  # skip the headers
        indexClusterDict = dict((rows[0], rows[1]) for rows in reader)

    if not DEBUG:
#        os.remove(os.path.join(os.getcwd(), "list.csv"))
        os.remove(os.path.join(os.getcwd(), "km_script.R"))
    return(indexClusterDict)


    # # def test_this_fails(self):
    # #      self.assertEqual("pinecone", 42)

    # def test_clean_temp_dir(self):
    #     """ I tried to do something like
    #     @unittest.skipUnless(clean_temp, "temporary files were retained")
    #     but couldnt get the variabel to be passed through.
    #     """
    #     if not os.path.exists(os.path.join(testdirname, "test_subdir")):
    #         os.makedirs(os.path.join(testdirname, "test_subdir"))
    #     clean_temp_dir(testdirname)

    # def test_make_output_prefix(self):
    #     test_prefix = make_output_prefix(testdirname, "utils_3.5")
    #     self.assertEqual(test_prefix,
    #                      "".join([testdirname, os.path.sep, "utils_3.5"]))

    # def test_check_installed_tools(self):
    #     """is pwd on all mac/linux systems?
    #     #TODO replace with better passing test
    #     """
    #     check_installed_tools(["pwd"])
    #     # test fails properly
    #     with self.assertRaises(SystemExit):
    #         check_installed_tools(["thisisnotapathtoanactualexecutable"])

    # def test_md5_strings(self):
    #     """ minimal md5 examples
    #     """
    #     self.assertEqual(md5("thisstringisidenticalto", string=True),
    #                      md5("thisstringisidenticalto", string=True))
    #     self.assertNotEqual(md5("thisstringisntidenticalto", string=True),
    #                         md5("thisstringisnotidenticalto", string=True))

    def tearDown(self):
        pass

if __name__ == '__main__':
    args = get_args()
    curdir = os.getcwd()
    # samtools_exe = args.samtools_exe
    testdirname = os.path.join(os.path.dirname(__file__),
                               "output_utils3_5_tests")
    test_loci_file = os.path.join(os.path.dirname(__file__),
                                   str("references" + os.path.sep +
                                       'grouped_loci_reference.txt'))
    test_gb_file = os.path.join(os.path.dirname(__file__),
                                   str("references" + os.path.sep +
                                       'NC_011751.1.gb'))
    test_loci_file = os.path.join(os.path.dirname(__file__),
                                   str("references" + os.path.sep +
                                       'grouped_loci_reference.txt'))
    # utils3_5TestCase.keep_temps = args.keep_temps
    unittest.main()
